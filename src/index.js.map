{"version":3,"sources":["../server/index.js"],"names":["plugins","push","HotModuleReplacementPlugin","connect","MONGO_URI","app","use","static","resolve","__dirname","json","port","process","env","PORT","compiler","noInfo","hot","historyApiFallback","publicPath","output","get","req","res","sendFile","join","server","createServer","listen"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;AAKA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAPA;AACA;AACA;;;AAXA;AACA;AACA;;AAgBA,kBAAOA,OAAP,CAAeC,IAAf,CAAoB,IAAI,kBAAQC,0BAAZ,EAApB;;AAEA;AACA;AACA;AA/BA;AACA;AACA;AA8BA,mBAASC,OAAT,CAAiB,uBAAWC,SAA5B;;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACA;AACA;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,CAAf,CAAR;;AAEA;AACA;AACA;AACAJ,IAAIC,GAAJ,CAAQ,qBAAWI,IAAX,EAAR;;AAEA;AACA;AACA;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAzB;;AAEA;AACA;AACA;AACA,IAAMC,WAAW,yCAAjB;;AAEA;AACA;AACA;AACAV,IAAIC,GAAJ,CAAQ,oCAAqBS,QAArB,CAAR;;AAEA;AACA;AACA;AACAV,IAAIC,GAAJ,CAAQ,oCAAqBS,QAArB,EAA+B;AACrCC,UAAQ,IAD6B;AAErCC,OAAK,IAFgC;AAGrCC,sBAAoB,IAHiB;AAIrCC,cAAY,kBAAOC,MAAP,CAAcD;AAJW,CAA/B,CAAR;;AAOA;AACA;AACA;AACAd,IAAIgB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,QAAJ,CAAa,eAAKC,IAAL,CAAUhB,SAAV,EAAqB,KAArB,EAA4B,mBAA5B,CAAb;AACD,CAFD;;AAIA;AACA;AACA;AACAJ,IAAIC,GAAJ,CAAQ,WAAR;AACAD,IAAIC,GAAJ,CAAQ,WAAR;AACAD,IAAIC,GAAJ,CAAQ,WAAR;;AAEA;AACA;AACA;AACA,IAAMoB,SAAS,eAAKC,YAAL,CAAkBtB,GAAlB,CAAf;;AAEA;AACA;AACA;AACAqB,OAAOE,MAAP,CAAcjB,IAAd","file":"index.js","sourcesContent":["///////////////////\n//Server modules //\n///////////////////\nimport path from \"path\";\nimport express from \"express\";\nimport http from \"http\";\nimport bodyParser from \"body-parser\";\nimport mongoose from \"mongoose\";\n\n///////////////////////////////////\n//Webpack HRM & Compiler modules //\n///////////////////////////////////\n\nimport webpack from \"webpack\";\nimport webpackHotMiddleware from \"webpack-hot-middleware\";\nimport webpackDevMiddleware from \"webpack-dev-middleware\";\nimport config from \"../webpack.config\";\n\n//////////////////\n//Route modules //\n//////////////////\nimport bar from \"./routes/bar/bar\";\nimport user from \"./routes/user/user\";\nimport auth from \"./routes/user/auth\";\n\nimport privateEnv from \"./config/private_keys\";\n\nconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n////////////////////////\n//Connect to database //\n////////////////////////\nmongoose.connect(privateEnv.MONGO_URI);\n\n//////////////////////////////////////////////\n//Certificate options for HTTPS development //\n//////////////////////////////////////////////\n/*const certOptions = {\n  pfx: fs.readFileSync(path.resolve(\"config/localhost.pfx\")),\n  passphrase: privateEnv.PASSPHRASE,\n};*/\n\n////////////////////////\n//Init express module //\n////////////////////////\nconst app = express();\n\n///////////////////////////\n//Static file middleware //\n///////////////////////////\napp.use(express.static(path.resolve(__dirname, \"public\")));\n\n////////////////////////\n//Parse req-body data //\n////////////////////////\napp.use(bodyParser.json());\n\n////////////////\n//Config PORT //\n////////////////\nconst port = process.env.PORT;\n\n///////////////////////////\n//Webpack compiler setup //\n///////////////////////////\nconst compiler = webpack(config);\n\n///////////////////////////\n//Webpack HRM Middleware //\n///////////////////////////\napp.use(webpackHotMiddleware(compiler));\n\n///////////////////////////\n//Webpack dev Middleware //\n///////////////////////////\napp.use(webpackDevMiddleware(compiler, {\n  noInfo: true,\n  hot: true,\n  historyApiFallback: true,\n  publicPath: config.output.publicPath,\n}));\n\n//////////////////////\n//Any route handler //\n//////////////////////\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"src\", \"public/index.html\"));\n});\n\n/////////////////\n//Mount routes //\n/////////////////\napp.use(\"/api/bars\", bar);\napp.use(\"/api/user\", user);\napp.use(\"/api/auth\", auth);\n\n////////////////////////////\n//Init server onver HTTPS //\n////////////////////////////\nconst server = http.createServer(app);\n\n///////////////////////////\n//Listen for connections //\n///////////////////////////\nserver.listen(port);\n"]}