{"version":3,"sources":["../../server/model/bar.js"],"names":["Schema","GeoCoords","latitude","type","Number","longitude","Item","alias","String","title","Address","address1","default","address2","address3","city","zip_code","country","state","display_address","Bar","id","name","image_url","is_closed","Boolean","going_count","attendees","url","review_count","categories","rating","coordinates","transactions","price","location","phone","display_name","distance","Businesses","businesses","model"],"mappings":";;;;;;AAGA;;;;;;AAEA,IAAMA,SAAS,mBAASA,MAAxB,C,CALA;AACA;AACA;;;AAKA,IAAMC,YAAY,IAAID,MAAJ,CAAW;AAC3BE,YAAU;AACRC,UAAMC;AADE,GADiB;AAI3BC,aAAW;AACTF,UAAMC;AADG;AAJgB,CAAX,CAAlB;;AASA,IAAME,OAAO,IAAIN,MAAJ,CAAW;AACtBO,SAAO;AACLJ,UAAMK;AADD,GADe;AAItBC,SAAO;AACLN,UAAMK;AADD;AAJe,CAAX,CAAb;;AASA,IAAME,UAAU,IAAIV,MAAJ,CAAW;AACzBW,YAAU;AACRR,UAAMK,MADE;AAERI,aAAS;AAFD,GADe;AAKzBC,YAAU;AACRV,UAAMK,MADE;AAERI,aAAS;AAFD,GALe;AASzBE,YAAU;AACRX,UAAMK,MADE;AAERI,aAAS;AAFD,GATe;AAazBG,QAAM;AACJZ,UAAMK,MADF;AAEJI,aAAS;AAFL,GAbmB;AAiBzBI,YAAU;AACRb,UAAMK,MADE;AAERI,aAAS;AAFD,GAjBe;AAqBzBK,WAAS;AACPd,UAAMK,MADC;AAEPI,aAAS;AAFF,GArBgB;AAyBzBM,SAAO;AACLf,UAAMK,MADD;AAELI,aAAS;AAFJ,GAzBkB;AA6BzBO,mBAAiB,CAACX,MAAD;AA7BQ,CAAX,CAAhB;;AAgCA,IAAMY,MAAM,IAAIpB,MAAJ,CAAW;AACrBqB,MAAI;AACFlB,UAAMK;AADJ,GADiB;AAIrBc,QAAM;AACJnB,UAAMK;AADF,GAJe;AAOrBe,aAAW;AACTpB,UAAMK;AADG,GAPU;AAUrBgB,aAAW;AACTrB,UAAMsB;AADG,GAVU;AAarBC,eAAa;AACXvB,UAAMC,MADK;AAEXQ,aAAS;AAFE,GAbQ;AAiBrBe,aAAW,CAACnB,MAAD,CAjBU;AAkBrBoB,OAAK;AACHzB,UAAMK;AADH,GAlBgB;AAqBrBqB,gBAAc;AACZ1B,UAAMC;AADM,GArBO;AAwBrB0B,cAAY,CAACxB,IAAD,CAxBS;AAyBrByB,UAAQ;AACN5B,UAAMC;AADA,GAzBa;AA4BrB4B,eAAa/B,SA5BQ;AA6BrBgC,gBAAc,CAACzB,MAAD,CA7BO;AA8BrB0B,SAAO;AACL/B,UAAMK;AADD,GA9Bc;AAiCrB2B,YAAUzB,OAjCW;AAkCrB0B,SAAO;AACLjC,UAAMK;AADD,GAlCc;AAqCrB6B,gBAAc;AACZlC,UAAMK;AADM,GArCO;AAwCrB8B,YAAU;AACRnC,UAAMC;AADE;AAxCW,CAAX,CAAZ;;AA6CA,IAAMmC,aAAa,IAAIvC,MAAJ,CAAW;AAC5BwC,cAAY,CAACpB,GAAD,CADgB;AAE5Be,YAAU3B;AAFkB,CAAX,CAAnB;;kBAKe,mBAASiC,KAAT,CAAe,YAAf,EAA6BF,UAA7B,C","file":"bar.js","sourcesContent":["//////////////////////\n//Bar shchema model //\n//////////////////////\nimport mongoose from \"mongoose\";\n\nconst Schema = mongoose.Schema;\n\nconst GeoCoords = new Schema({\n  latitude: {\n    type: Number,\n  },\n  longitude: {\n    type: Number,\n  },\n});\n\nconst Item = new Schema({\n  alias: {\n    type: String,\n  },\n  title: {\n    type: String,\n  },\n});\n\nconst Address = new Schema({\n  address1: {\n    type: String,\n    default: \"\",\n  },\n  address2: {\n    type: String,\n    default: \"\",\n  },\n  address3: {\n    type: String,\n    default: \"\",\n  },\n  city: {\n    type: String,\n    default: \"\",\n  },\n  zip_code: {\n    type: String,\n    default: \"\",\n  },\n  country: {\n    type: String,\n    default: \"\",\n  },\n  state: {\n    type: String,\n    default: \"\",\n  },\n  display_address: [String],\n});\n\nconst Bar = new Schema({\n  id: {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n  image_url: {\n    type: String,\n  },\n  is_closed: {\n    type: Boolean,\n  },\n  going_count: {\n    type: Number,\n    default: 0,\n  },\n  attendees: [String],\n  url: {\n    type: String,\n  },\n  review_count: {\n    type: Number,\n  },\n  categories: [Item],\n  rating: {\n    type: Number,\n  },\n  coordinates: GeoCoords,\n  transactions: [String],\n  price: {\n    type: String,\n  },\n  location: Address,\n  phone: {\n    type: String,\n  },\n  display_name: {\n    type: String,\n  },\n  distance: {\n    type: Number,\n  },\n});\n\nconst Businesses = new Schema({\n  businesses: [Bar],\n  location: String,\n});\n\nexport default mongoose.model(\"Businesses\", Businesses);\n"]}