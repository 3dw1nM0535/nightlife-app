{"version":3,"sources":["../../server/model/user.js"],"names":["Schema","UserSchema","email","type","String","index","unique","lowercase","required","passwordHash","timestamps","methods","setPassword","password","hashSync","isValidPassword","compareSync","generateJWT","sign","_id","SECRET_KEY","toJSON","token","plugin","message","model"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,mBAASA,MAAxB,C,CAVA;AACA;AACA;;;AAUA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC5BE,SAAO;AACLC,UAAMC,MADD;AAELC,WAAO,IAFF;AAGLC,YAAQ,IAHH;AAILC,eAAW,IAJN;AAKLC,cAAU;AALL,GADqB;AAQ5BC,gBAAc;AACZN,UAAMC,MADM;AAEZI,cAAU;AAFE;AARc,CAAX,EAYhB,EAAEE,YAAY,IAAd,EAZgB,CAAnB;;AAeA;AACA;AACA;AACAT,WAAWU,OAAX,CAAmBC,WAAnB,GAAiC,SAASA,WAAT,CAAqBC,QAArB,EAA+B;AAC9D,OAAKJ,YAAL,GAAoB,iBAAOK,QAAP,CAAgBD,QAAhB,EAA0B,EAA1B,CAApB;AACD,CAFD;;AAIA;AACA;AACA;AACAZ,WAAWU,OAAX,CAAmBI,eAAnB,GAAqC,SAASA,eAAT,CAAyBF,QAAzB,EAAmC;AACtE,SAAO,iBAAOG,WAAP,CAAmBH,QAAnB,EAA6B,KAAKJ,YAAlC,CAAP;AACD,CAFD;;AAIA;AACA;AACA;AACAR,WAAWU,OAAX,CAAmBM,WAAnB,GAAiC,SAASA,WAAT,GAAuB;AACtD,SAAO,uBAAIC,IAAJ,CAAS;AACdhB,WAAO,KAAKA,KADE;AAEdiB,SAAK,KAAKA;AAFI,GAAT,EAGJ,uBAAWC,UAHP,CAAP;AAID,CALD;;AAOA;AACA;AACA;AACAnB,WAAWU,OAAX,CAAmBU,MAAnB,GAA4B,SAASA,MAAT,GAAkB;AAC5C,SAAO;AACLnB,WAAO,KAAKA,KADP;AAELiB,SAAK,KAAKA,GAFL;AAGLG,WAAO,KAAKL,WAAL;AAHF,GAAP;AAKD,CAND;;AAQA;AACA;AACA;AACAhB,WAAWsB,MAAX,oCAAmC,EAAEC,SAAS,6BAAX,EAAnC;;kBAEe,mBAASC,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,C","file":"user.js","sourcesContent":["//////////////////////\n//User schema model //\n//////////////////////\nimport mongoose from \"mongoose\";\nimport uniqueValidator from \"mongoose-unique-validator\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\nimport privateEnv from \"../config/private_keys\";\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    index: true,\n    unique: true,\n    lowercase: true,\n    required: true,\n  },\n  passwordHash: {\n    type: String,\n    required: true,\n  },\n}, { timestamps: true });\n\n\n//////////////////////\n//Set user password //\n//////////////////////\nUserSchema.methods.setPassword = function setPassword(password) {\n  this.passwordHash = bcrypt.hashSync(password, 10);\n};\n\n////////////////////////////////////\n//Validate user password function //\n////////////////////////////////////\nUserSchema.methods.isValidPassword = function isValidPassword(password) {\n  return bcrypt.compareSync(password, this.passwordHash);\n};\n\n///////////////////\n//Generate token //\n///////////////////\nUserSchema.methods.generateJWT = function generateJWT() {\n  return jwt.sign({\n    email: this.email,\n    _id: this._id,\n  }, privateEnv.SECRET_KEY);\n};\n\n///////////////////////////\n//Send user data in JSON //\n///////////////////////////\nUserSchema.methods.toJSON = function toJSON() {\n  return {\n    email: this.email,\n    _id: this._id,\n    token: this.generateJWT(),\n  };\n};\n\n////////////////////////////////////\n//Plugin for our user data schema //\n////////////////////////////////////\nUserSchema.plugin(uniqueValidator, { message: \"This email is already taken\" });\n\nexport default mongoose.model(\"User\", UserSchema);\n"]}